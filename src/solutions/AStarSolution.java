package solutions;

import game.Game;
import game.Move;

import java.util.Comparator;
import java.util.PriorityQueue;

public class AStarSolution implements Solution {
    public int threshold;

    public AStarSolution(int threshold) {
        this.threshold = threshold;
    }

    public AStarSolution() {
        this.threshold = Integer.MAX_VALUE;
    }

    @Override
    public String solve(Game game, int verbose) {
        /*
         * This solution uses a priority queue to iterate over all possible states that can be reached
         * by the starting state
         */
        PriorityQueue<String> pq = new PriorityQueue<>(Comparator.comparingInt(o -> game.evaluate(o) + o.length()));
        pq.add(game.getState());

        int minScore = game.evaluate();
        int minScoreSteps = game.getSteps();

        int count = 0;
        while (!pq.isEmpty()) {
            // Get the game state with the least evaluation score
            String nextState = pq.remove();
            game.loadState(nextState);

            // Return if the final state has been reached
            if (game.isFinalState()) {
                return game.getPastMoves();
            }

            // Add the new states generated by the valid moves
            for (Move move : game.getValidMoves()) {
                game.move(move);
                String state = game.getState();

                // Update the current best score
                int score = game.evaluate();
                int steps = game.getSteps();
                if (score < minScore) {
                    minScore = score;
                    minScoreSteps = steps;
                    if (verbose >= 1) {
                        System.out.printf("%d/0: %d iterations\n", score, count);
                    }
                    if (verbose >= 2) {
                        System.out.println(game.getState());
                        System.out.println();
                    }
                }

                // Trim all states that are far from minimum
                if (score + steps - minScore - minScoreSteps <= threshold) {
                    pq.add(state);
                }

                game.undo();
            }
            count++;
        }

        // Return empty string if no solution found
        return "";
    }
}
